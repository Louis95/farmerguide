"""
Added databse tables.

Revision ID: 06ddb43b78eb
Revises:
Create Date: 2024-07-27 13:32:00.344305
"""
# flake8: noqa
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "06ddb43b78eb"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "farms",
        sa.Column("created_at", postgresql.TIMESTAMP(precision=6), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", postgresql.TIMESTAMP(precision=6), server_default=sa.text("now()"), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("location", sa.String(), nullable=True),
        sa.Column("size", sa.Float(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_farms_id"), "farms", ["id"], unique=False)
    op.create_index(op.f("ix_farms_name"), "farms", ["name"], unique=False)
    op.create_table(
        "users",
        sa.Column("created_at", postgresql.TIMESTAMP(precision=6), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", postgresql.TIMESTAMP(precision=6), server_default=sa.text("now()"), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("username", sa.String(), nullable=True),
        sa.Column("email", sa.String(), nullable=True),
        sa.Column("hashed_password", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=False)
    op.create_index(op.f("ix_users_username"), "users", ["username"], unique=True)
    op.create_table(
        "crop_diseases",
        sa.Column("created_at", postgresql.TIMESTAMP(precision=6), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", postgresql.TIMESTAMP(precision=6), server_default=sa.text("now()"), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("farm_id", sa.Integer(), nullable=True),
        sa.Column("crop_type", sa.String(), nullable=True),
        sa.Column("disease_name", sa.String(), nullable=True),
        sa.Column("confidence", sa.Float(), nullable=True),
        sa.Column("image_url", sa.String(), nullable=True),
        sa.Column("treatment_recommendation", sa.Text(), nullable=True),
        sa.Column("detected_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.ForeignKeyConstraint(
            ["farm_id"],
            ["farms.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_crop_diseases_id"), "crop_diseases", ["id"], unique=False)
    op.create_table(
        "farming_advice",
        sa.Column("updated_at", postgresql.TIMESTAMP(precision=6), server_default=sa.text("now()"), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("farm_id", sa.Integer(), nullable=True),
        sa.Column("advice_type", sa.String(), nullable=True),
        sa.Column("content", sa.Text(), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.ForeignKeyConstraint(
            ["farm_id"],
            ["farms.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_farming_advice_id"), "farming_advice", ["id"], unique=False)
    op.create_table(
        "notifications",
        sa.Column("updated_at", postgresql.TIMESTAMP(precision=6), server_default=sa.text("now()"), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("message", sa.Text(), nullable=True),
        sa.Column("notification_type", sa.String(), nullable=True),
        sa.Column("is_read", sa.Boolean(), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_notifications_id"), "notifications", ["id"], unique=False)
    op.create_table(
        "soil_health",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("farm_id", sa.Integer(), nullable=True),
        sa.Column("ph_level", sa.Float(), nullable=True),
        sa.Column("nitrogen_level", sa.Float(), nullable=True),
        sa.Column("phosphorus_level", sa.Float(), nullable=True),
        sa.Column("potassium_level", sa.Float(), nullable=True),
        sa.Column("organic_matter", sa.Float(), nullable=True),
        sa.Column("analysis_date", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("recommendations", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["farm_id"],
            ["farms.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_soil_health_id"), "soil_health", ["id"], unique=False)
    op.create_table(
        "user_farm",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("farm_id", sa.Integer(), nullable=False),
        sa.Column("role", sa.Enum("OWNER", "MANAGER", "WORKER", "CONSULTANT", name="userrole"), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["farm_id"],
            ["farms.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "farm_id"),
    )
    op.create_table(
        "weather_forecasts",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("farm_id", sa.Integer(), nullable=True),
        sa.Column("date", sa.DateTime(), nullable=True),
        sa.Column("temperature", sa.Float(), nullable=True),
        sa.Column("humidity", sa.Float(), nullable=True),
        sa.Column("precipitation", sa.Float(), nullable=True),
        sa.Column("wind_speed", sa.Float(), nullable=True),
        sa.Column("forecast_type", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.ForeignKeyConstraint(
            ["farm_id"],
            ["farms.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_weather_forecasts_id"), "weather_forecasts", ["id"], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_weather_forecasts_id"), table_name="weather_forecasts")
    op.drop_table("weather_forecasts")
    op.drop_table("user_farm")
    op.drop_index(op.f("ix_soil_health_id"), table_name="soil_health")
    op.drop_table("soil_health")
    op.drop_index(op.f("ix_notifications_id"), table_name="notifications")
    op.drop_table("notifications")
    op.drop_index(op.f("ix_farming_advice_id"), table_name="farming_advice")
    op.drop_table("farming_advice")
    op.drop_index(op.f("ix_crop_diseases_id"), table_name="crop_diseases")
    op.drop_table("crop_diseases")
    op.drop_index(op.f("ix_users_username"), table_name="users")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_table("users")
    op.drop_index(op.f("ix_farms_name"), table_name="farms")
    op.drop_index(op.f("ix_farms_id"), table_name="farms")
    op.drop_table("farms")
    # ### end Alembic commands ###
