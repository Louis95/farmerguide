"""
Add crop table.

Revision ID: 05a96ea0e6e8
Revises: b080eb1fe8d7
Create Date: 2024-08-06 20:25:43.078293
"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "05a96ea0e6e8"
down_revision = "b080eb1fe8d7"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "crops",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("farm_id", sa.Integer(), nullable=True),
        sa.Column("crop_type", sa.String(), nullable=True),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.Column("planted_on", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column(
            "harvested_on", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True
        ),  # noqa: B950
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=True),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(precision=6), server_default=sa.text("now()"), nullable=True
        ),  # noqa: B950
        sa.ForeignKeyConstraint(["farm_id"], ["farms.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_crops_id"), "crops", ["id"], unique=False)
    op.add_column("crop_diagnosis", sa.Column("crop_id", sa.Integer(), nullable=True))
    op.drop_constraint("crop_diagnosis_farm_id_fkey", "crop_diagnosis", type_="foreignkey")
    op.create_foreign_key(None, "crop_diagnosis", "crops", ["crop_id"], ["id"], ondelete="CASCADE")
    op.drop_column("crop_diagnosis", "farm_id")
    op.add_column("crop_diseases", sa.Column("crop_id", sa.Integer(), nullable=True))
    op.drop_constraint("crop_diseases_farm_id_fkey", "crop_diseases", type_="foreignkey")
    op.create_foreign_key(None, "crop_diseases", "crops", ["crop_id"], ["id"], ondelete="CASCADE")
    op.drop_column("crop_diseases", "farm_id")
    op.add_column("farms", sa.Column("latitude", sa.Float(), nullable=True))
    op.add_column("farms", sa.Column("longitude", sa.Float(), nullable=True))
    op.drop_column("farms", "location")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("farms", sa.Column("location", sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_column("farms", "longitude")
    op.drop_column("farms", "latitude")
    op.add_column("crop_diseases", sa.Column("farm_id", sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, "crop_diseases", type_="foreignkey")
    op.create_foreign_key("crop_diseases_farm_id_fkey", "crop_diseases", "farms", ["farm_id"], ["id"])
    op.drop_column("crop_diseases", "crop_id")
    op.add_column("crop_diagnosis", sa.Column("farm_id", sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, "crop_diagnosis", type_="foreignkey")
    op.create_foreign_key("crop_diagnosis_farm_id_fkey", "crop_diagnosis", "farms", ["farm_id"], ["id"])
    op.drop_column("crop_diagnosis", "crop_id")
    op.drop_index(op.f("ix_crops_id"), table_name="crops")
    op.drop_table("crops")
    # ### end Alembic commands ###
